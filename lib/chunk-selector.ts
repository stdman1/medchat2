import { qdrant, COLLECTION_NAME } from './qdrant-service';
import { getUsedChunkIds, resetUsedChunkIds } from './news-manager';

export interface SelectedChunk {
  id: number;
  content: string;
  // FIX 1: Thay any th√†nh Record<string, unknown>
  metadata?: Record<string, unknown>;
}

export interface ChunkSelectionResult {
  success: boolean;
  chunk: SelectedChunk | null;
  message: string;
  cycle_reset?: boolean;
}

// L·∫•y t·ªïng s·ªë chunks trong collection
async function getTotalChunksCount(): Promise<number> {
  try {
    const info = await qdrant.getCollection(COLLECTION_NAME);
    return info.points_count || 0;
  } catch (error) {
    console.error('Error getting total chunks count:', error);
    return 0;
  }
}

// L·∫•y danh s√°ch t·∫•t c·∫£ chunk IDs
async function getAllChunkIds(): Promise<number[]> {
  try {
    const scrollResult = await qdrant.scroll(COLLECTION_NAME, {
      limit: 10000, // Gi·∫£ s·ª≠ kh√¥ng c√≥ qu√° 10k chunks
      with_payload: false,
      with_vector: false
    });
    
    return scrollResult.points.map(point => Number(point.id));
  } catch (error) {
    console.error('Error getting all chunk IDs:', error);
    return [];
  }
}

// L·∫•y chunk theo ID c·ª• th·ªÉ
async function getChunkById(id: number): Promise<SelectedChunk | null> {
  try {
    const points = await qdrant.retrieve(COLLECTION_NAME, {
      ids: [id],
      with_payload: true,
      with_vector: false
    });
    
    if (points.length === 0) {
      return null;
    }
    
    const point = points[0];
    return {
      id: Number(point.id),
      content: point.payload?.content as string || '',
      metadata: point.payload || {}
    };
  } catch (error) {
    console.error('Error getting chunk by ID:', error);
    return null;
  }
}

// Ch·ªçn chunk random (tr√°nh tr√πng l·∫∑p)
export async function selectRandomChunk(): Promise<ChunkSelectionResult> {
  try {
    console.log('üé≤ Starting smart chunk selection...');
    
    // L·∫•y danh s√°ch chunks ƒë√£ s·ª≠ d·ª•ng
    const usedChunkIds = await getUsedChunkIds();
    console.log(`üìä Used chunks: ${usedChunkIds.length}`);
    
    // L·∫•y t·∫•t c·∫£ chunk IDs c√≥ s·∫µn
    const allChunkIds = await getAllChunkIds();
    console.log(`üìä Total chunks: ${allChunkIds.length}`);
    
    if (allChunkIds.length === 0) {
      return {
        success: false,
        chunk: null,
        message: 'No chunks found in Qdrant collection'
      };
    }
    
    // T√¨m chunks ch∆∞a s·ª≠ d·ª•ng
    const availableChunkIds = allChunkIds.filter(id => !usedChunkIds.includes(String(id)));
    console.log(`üìä Available chunks: ${availableChunkIds.length}`);
    
    let selectedChunkId: number;
    let cycleReset = false;
    
    // N·∫øu h·∫øt chunks ch∆∞a s·ª≠ d·ª•ng, reset cycle
    if (availableChunkIds.length === 0) {
      console.log('üîÑ All chunks used, resetting cycle...');
      const resetSuccess = await resetUsedChunkIds();
      
      if (!resetSuccess) {
        return {
          success: false,
          chunk: null,
          message: 'Failed to reset used chunks cycle'
        };
      }
      
      cycleReset = true;
      selectedChunkId = allChunkIds[Math.floor(Math.random() * allChunkIds.length)];
    } else {
      // Ch·ªçn random t·ª´ chunks ch∆∞a s·ª≠ d·ª•ng
      selectedChunkId = availableChunkIds[Math.floor(Math.random() * availableChunkIds.length)];
    }
    
    console.log(`üéØ Selected chunk ID: ${selectedChunkId}`);
    
    // L·∫•y n·ªôi dung chunk
    const chunk = await getChunkById(selectedChunkId);
    
    if (!chunk) {
      return {
        success: false,
        chunk: null,
        message: `Chunk with ID ${selectedChunkId} not found`
      };
    }
    
    // Ki·ªÉm tra content c√≥ h·ª£p l·ªá kh√¥ng
    if (!chunk.content || chunk.content.trim().length < 50) {
      console.log('‚ö†Ô∏è Selected chunk content too short, trying again...');
      // Th·ª≠ ch·ªçn chunk kh√°c (recursive call, nh∆∞ng gi·ªõi h·∫°n ƒë·ªÉ tr√°nh infinite loop)
      return await selectRandomChunk();
    }
    
    return {
      success: true,
      chunk,
      message: cycleReset 
        ? 'Selected chunk successfully (cycle reset)' 
        : 'Selected chunk successfully',
      cycle_reset: cycleReset
    };
    
  } catch (error) {
    console.error('‚ùå Error in selectRandomChunk:', error);
    return {
      success: false,
      chunk: null,
      message: `Error selecting chunk: ${error}`
    };
  }
}

// L·∫•y th·ªëng k√™ chunk selection
export async function getChunkSelectionStats() {
  try {
    const totalChunks = await getTotalChunksCount();
    const usedChunks = await getUsedChunkIds();
    
    return {
      total_chunks: totalChunks,
      used_chunks: usedChunks.length,
      available_chunks: totalChunks - usedChunks.length,
      usage_percentage: totalChunks > 0 ? (usedChunks.length / totalChunks * 100).toFixed(1) : '0'
    };
  } catch (error) {
    console.error('Error getting chunk selection stats:', error);
    return null;
  }
}

// Ki·ªÉm tra k·∫øt n·ªëi Qdrant
export async function testQdrantConnection(): Promise<boolean> {
  try {
    await qdrant.getCollections();
    return true;
  } catch (error) {
    console.error('Qdrant connection failed:', error);
    return false;
  }
}