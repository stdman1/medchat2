// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Bảng người dùng
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String   // Sẽ hash trước khi lưu
  displayName String   @default("Thành viên mới") // Tên hiển thị có thể đổi
  
  // ✅ THÊM THÔNG TIN CÁ NHÂN VÀ Y TẾ
  gender      String?   // "Nam", "Nữ", "Khác"
  height      Float?    // Chiều cao (cm)
  weight      Float?    // Cân nặng (kg)
  age         Int?      // Tuổi
  allergies   String?   // Dị ứng (có thể nhiều loại, phân tách bằng dấu ,)
  
  // Tiền sử bệnh án
  hasHypertension Boolean @default(false) // Có từng bị cao huyết áp không
  hasDiabetes     Boolean @default(false) // Có từng bị tiểu đường không
  isSmoker        Boolean @default(false) // Có hút thuốc lá không
  
  currentMedications String? @db.Text // Các loại thuốc đang dùng (dạng text dài)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Quan hệ với tin nhắn
  messages    Message[]
  
  @@map("users")
}

// Bảng tin nhắn 
model Message {
  id        String   @id @default(cuid())
  content   String
  sender    String   // 'user' hoặc 'bot' hoặc 'system'
  isMarkdown Boolean @default(false)
  createdAt DateTime @default(now())
  
  // Quan hệ với người dùng
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// Bảng phiên chat (tùy chọn - để nhóm tin nhắn)
model ChatSession {
  id        String   @id @default(cuid())
  title     String   @default("Cuộc trò chuyện mới")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("chat_sessions")
}

// THÊM MỚI - Bảng bài viết
model Article {
  id              String   @id @default(cuid())
  title           String
  content         String   @db.Text
  summary         String   @db.Text
  image_url       String?
  tags            String[]
  category        String
  source_chunk_id String?  // ✅ ĐÃ SỬA: BigInt? → String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("articles")
}

// THÊM MỚI - Bảng tracking chunks đã sử dụng
model UsedChunk {
  id         String   @id @default(cuid())
  chunk_id   String   @unique  // ✅ ĐÃ SỬA: BigInt → String
  created_at DateTime @default(now())
  
  @@map("used_chunks")
}

// THÊM MỚI - Bảng thống kê
model GenerationStats {
  id              String   @id @default(cuid())
  total_generated Int      @default(0)
  last_generated  DateTime?
  cycle_count     Int      @default(0)
  max_articles    Int      @default(50)
  auto_reset_cycle Boolean @default(true)
  updated_at      DateTime @updatedAt
  
  @@map("generation_stats")
}